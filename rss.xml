<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[My Emacs Blog]]></title>
<description><![CDATA[My Emacs Blog]]></description>
<link>https://spepo.github.io/</link>
<lastBuildDate>Tue, 18 Feb 2025 11:03:54 -0800</lastBuildDate>
<item>
  <title><![CDATA[Speed Dialing Your Favorite Files]]></title>
  <description><![CDATA[
<p>
I may be dating myself, but I vividly remember setting up speed dials for my most frequently called numbers on my AT&amp;T landline phone. In the early '90s, you could store a phone number in a numbered memory slot (referred to as "programming") and later dial your grandma, for example, by pressing <code>SPD+2</code>. Retro is in&#x2014;so if you're too young to remember that and want to know more, just ask your favorite LLM chatbot to fill you in.
</p>

<p>
Speed-dialing as a user experience concept is widespread, although we don't normally call it that anymore. It is implemented as a feature that I use many times a day in my web browser. I use Safari on a Mac and typically keep many tabs open. I pin the first few to frequently visited URLs, like <a href="https://planet.emacslife.com">https://planet.emacslife.com</a>. I can quickly switch to one of them using the keyboard shortcut <code>CMD+1..9</code>, always knowing which website I'll get. Other browsers offer similar functionality, though they may use different shortcuts, like <code>CTRL+1..9</code>.
</p>

<p>
The two apps I use most often on my Mac are Safari and Emacs, and I wondered, “Why don't I have a similar speed-dialing feature in Emacs?” It would be incredibly useful to switch instantly to my important files for reading or jotting down notes. I also like to optimize my keybindings, and consistency plays a big role in that&#x2014;whether it’s adopting Emacs keybindings elsewhere or bringing external shortcuts into Emacs. It would be great to use the same <code>CMD+1..9</code> shortcut to recreate this functionality in Emacs.
</p>

<p>
But doesn’t Emacs already have Tab Bar and Tab Line features? Maybe one of them (I can never remember which is which) could be adapted or enhanced to do what I want. Note, however, that I’m talking about speed dialing files, not tabs. I don’t want to select a tab or cycle through them&#x2014;I want to jump directly to a specific buffer that’s visiting a specific file. Tabs feel a bit unnatural in Emacs; they make sense in browsers, but in Emacs, we typically work with buffers by name.
</p>

<p>
Direct addressing&#x2014;using a name or a short index&#x2014;is both powerful and highly efficient. Cycling is the least efficient method (looking at you, <code>CMD+TAB</code>). Completion is a middle ground&#x2014;it requires extra keystrokes compared to direct addressing and is less predictable when the candidate list changes (in how many characters must be typed to get a single match).  However, it’s essential when the list of candidates is long.
</p>

<blockquote>
<p>
Direct Addressing &gt; Completion &gt; Cycling
</p>
</blockquote>

<p>
In general, I prefer direct addressing whenever possible, completion when necessary, and cycling only as a last resort. Emacs' built-in <code>bookmark-jump</code> falls into the completion category. It would be my next choice if the number of my frequently used files was above ten.
</p>

<p>
Another reason I avoid using tabs for this in Emacs is that I don’t want to waste screen real estate on a tab bar if I don’t have to. My speed dials are mostly static&#x2014;I may change them occasionally, but if I assign <code>1</code> to <code>school.org</code> and <code>2</code> to <code>house.org</code>, I want to stick with that. Thanks to muscle memory, I don’t need to see the list in front of me at all times. Plus, accidentally switching to the wrong frequently used file isn’t a big deal&#x2014;I can quickly flip through a few of them to find what I need.
</p>

<p>
The beauty of Emacs is that I can create a Safari-like speed-dial experience with just a couple of elisp expressions in my <code>init.el</code> file.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #505050; font-style: italic;">;;</span>
<span style="color: #505050; font-style: italic;">;; </span><span style="color: #505050; font-style: italic;">Speed Dialing Favorite Files</span>
<span style="color: #505050; font-style: italic;">;;</span>
(<span style="color: #5317ac; font-weight: bold;">defvar</span> <span style="color: #00538b;">/speed-dial-list</span>
  '((<span style="color: #2544bb;">"&#9461;-todo"</span> . <span style="color: #2544bb;">"~/todo.org"</span>)
    (<span style="color: #2544bb;">"&#9462;-emacs"</span> . <span style="color: #2544bb;">"~/para/areas/emacs.org"</span>)
    (<span style="color: #2544bb;">"&#9463;-family"</span> . <span style="color: #2544bb;">"~/para/areas/family.org"</span>)
    (<span style="color: #2544bb;">"&#9464;-house"</span> . <span style="color: #2544bb;">"~/para/areas/house.org"</span>)
    (<span style="color: #2544bb;">"&#9465;-garden"</span> . <span style="color: #2544bb;">"~/para/areas/garden.org"</span>)
    (<span style="color: #2544bb;">"&#9466;-42"</span> . <span style="color: #2544bb;">"~/para/areas/42.org"</span>)
    (<span style="color: #2544bb;">"&#9467;-init"</span> . <span style="color: #2544bb;">"~/.emacs.d/init.el"</span>)
    (<span style="color: #2544bb;">"&#9468;-O1"</span> . <span style="color: #2544bb;">"~/para/projects/proj1.org"</span>)
    (<span style="color: #2544bb;">"&#9469;-O2"</span> . <span style="color: #2544bb;">"~/para/projects/proj2.org"</span>)
    (<span style="color: #2544bb;">"&#9470;-O3"</span> . <span style="color: #2544bb;">"~/para/projects/proj3.org"</span>))
  <span style="color: #2a486a; font-style: italic;">"List of speed-dial entries as (LABEL . FILENAME)."</span>)

<span style="color: #505050; font-style: italic;">;; </span><span style="color: #505050; font-style: italic;">Global keybindings for speed dialing using '</span><span style="color: #0000c0; font-style: italic;">&lt;Super&gt;</span><span style="color: #505050; font-style: italic;">' + digit</span>
(<span style="color: #5317ac; font-weight: bold;">let</span> ((i 1))
  (<span style="color: #5317ac; font-weight: bold;">dolist</span> (entry /speed-dial-list)
    (keymap-global-set (format <span style="color: #2544bb;">"s-%d"</span> (mod i 10))
                       `(<span style="color: #5317ac; font-weight: bold;">lambda</span>() (<span style="color: #5317ac; font-weight: bold;">interactive</span>) (find-file-existing ,(cdr entry))))
    (<span style="color: #5317ac; font-weight: bold;">setq</span> i (1+ i))))
</pre>
</div>

<p>
As you can see, I use the <code>&lt;Super&gt;</code> key modifier to define bindings that match my Safari shortcuts, <code>CMD+1..9</code>. Note a little trick: using the mod function inside <code>keymap-global-set</code> to get <code>s-0</code> to invoke the tenth speed-dial entry.
</p>

<p>
Currently, the speed-dial bindings simply call the <code>find-file-existing</code> function to switch to the corresponding buffer, opening the file if needed. But you can customize this further by using your own function for tailored behavior.
</p>

<p>
For example, you might use repeated presses of the same <code>CMD+0..9</code> to change folding in an Org buffer, jump to a predefined heading, switch to a related buffer, or perform other context-specific actions.
</p>

<figure>
<img src="https://spepo.github.io/static/2025-02/speed_dialing_screenshot1.png" alt="speed_dialing_screenshot.png">
</figure>

<p>
Rather than visualizing the speed-dial entries as tabs, I found a way to display them without taking up valuable screen real estate. I simply splice the speed-dial labels into the Emacs frame title bar, which I don't really use for anything else. By default, it shows the current buffer name, but that information is also displayed in the mode line, which is where my eyes naturally go.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #505050; font-style: italic;">;; </span><span style="color: #505050; font-style: italic;">Inject my speed-dial list into the frame title</span>
(<span style="color: #5317ac; font-weight: bold;">setq</span> frame-title-format (concat (mapconcat #'car /speed-dial-list <span style="color: #2544bb;">"  "</span>)
                                 <span style="color: #2544bb;">" - %b"</span>))
</pre>
</div>

<p>
For my needs, displaying speed-dial entries in the Emacs frame title, followed by the current buffer name, works perfectly. My main Emacs frame is always wide enough to accommodate it. If I couldn’t use the frame title, I’d probably just open my <code>init.el</code> whenever I needed to check which speed-dial number maps to which file. But you might find an even better approach that works for you.
</p>

<blockquote>
<p>
Enjoy the malleability of Emacs and the freedom it gives you!
</p>
</blockquote>

<p>
Discuss this post on <a href="https://www.reddit.com/r/emacs/comments/1iskl3w/speed_dialing_your_favorite_files/">Reddit</a>.
</p>
<div class="taglist"><a href="https://spepo.github.io/tags.html">Tags</a>: <a href="https://spepo.github.io/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://spepo.github.io/2025-02-18-speed-dial-your-favorite-files.html</link>
  <guid>https://spepo.github.io/2025-02-18-speed-dial-your-favorite-files.html</guid>
  <pubDate>Tue, 18 Feb 2025 10:46:00 -0800</pubDate>
</item>
</channel>
</rss>
